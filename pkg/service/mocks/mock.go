// Code generated by MockGen. DO NOT EDIT.
// Source: image_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	model "Jameson/pkg/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockImageService is a mock of ImageService interface.
type MockImageService struct {
	ctrl     *gomock.Controller
	recorder *MockImageServiceMockRecorder
}

// MockImageServiceMockRecorder is the mock recorder for MockImageService.
type MockImageServiceMockRecorder struct {
	mock *MockImageService
}

// NewMockImageService creates a new mock instance.
func NewMockImageService(ctrl *gomock.Controller) *MockImageService {
	mock := &MockImageService{ctrl: ctrl}
	mock.recorder = &MockImageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageService) EXPECT() *MockImageServiceMockRecorder {
	return m.recorder
}

// ApproveReferenceForContainer mocks base method.
func (m *MockImageService) ApproveReferenceForContainer(containerId string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveReferenceForContainer", containerId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApproveReferenceForContainer indicates an expected call of ApproveReferenceForContainer.
func (mr *MockImageServiceMockRecorder) ApproveReferenceForContainer(containerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveReferenceForContainer", reflect.TypeOf((*MockImageService)(nil).ApproveReferenceForContainer), containerId)
}

// CreateNewTestContainer mocks base method.
func (m *MockImageService) CreateNewTestContainer(testContainer model.TestContainer) (*model.TestContainer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewTestContainer", testContainer)
	ret0, _ := ret[0].(*model.TestContainer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewTestContainer indicates an expected call of CreateNewTestContainer.
func (mr *MockImageServiceMockRecorder) CreateNewTestContainer(testContainer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewTestContainer", reflect.TypeOf((*MockImageService)(nil).CreateNewTestContainer), testContainer)
}

// CreateProject mocks base method.
func (m *MockImageService) CreateProject(project *model.Project) (*model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", project)
	ret0, _ := ret[0].(*model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockImageServiceMockRecorder) CreateProject(project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockImageService)(nil).CreateProject), project)
}

// DeleteContainerById mocks base method.
func (m *MockImageService) DeleteContainerById(containerId string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainerById", containerId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContainerById indicates an expected call of DeleteContainerById.
func (mr *MockImageServiceMockRecorder) DeleteContainerById(containerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainerById", reflect.TypeOf((*MockImageService)(nil).DeleteContainerById), containerId)
}

// DownloadImage mocks base method.
func (m *MockImageService) DownloadImage(fileName string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadImage", fileName)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadImage indicates an expected call of DownloadImage.
func (mr *MockImageServiceMockRecorder) DownloadImage(fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadImage", reflect.TypeOf((*MockImageService)(nil).DownloadImage), fileName)
}

// GetContainerById mocks base method.
func (m *MockImageService) GetContainerById(containerId string) (*model.TestContainer, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerById", containerId)
	ret0, _ := ret[0].(*model.TestContainer)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetContainerById indicates an expected call of GetContainerById.
func (mr *MockImageServiceMockRecorder) GetContainerById(containerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerById", reflect.TypeOf((*MockImageService)(nil).GetContainerById), containerId)
}

// GetContainerByName mocks base method.
func (m *MockImageService) GetContainerByName(name string) (*model.TestContainer, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerByName", name)
	ret0, _ := ret[0].(*model.TestContainer)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetContainerByName indicates an expected call of GetContainerByName.
func (mr *MockImageServiceMockRecorder) GetContainerByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerByName", reflect.TypeOf((*MockImageService)(nil).GetContainerByName), name)
}

// GetContainers mocks base method.
func (m *MockImageService) GetContainers() []model.TestContainer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainers")
	ret0, _ := ret[0].([]model.TestContainer)
	return ret0
}

// GetContainers indicates an expected call of GetContainers.
func (mr *MockImageServiceMockRecorder) GetContainers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainers", reflect.TypeOf((*MockImageService)(nil).GetContainers))
}

// GetProjects mocks base method.
func (m *MockImageService) GetProjects() ([]model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjects")
	ret0, _ := ret[0].([]model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjects indicates an expected call of GetProjects.
func (mr *MockImageServiceMockRecorder) GetProjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjects", reflect.TypeOf((*MockImageService)(nil).GetProjects))
}

// SetNewReferenceForContainer mocks base method.
func (m *MockImageService) SetNewReferenceForContainer(containerId, referenceId string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNewReferenceForContainer", containerId, referenceId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetNewReferenceForContainer indicates an expected call of SetNewReferenceForContainer.
func (mr *MockImageServiceMockRecorder) SetNewReferenceForContainer(containerId, referenceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNewReferenceForContainer", reflect.TypeOf((*MockImageService)(nil).SetNewReferenceForContainer), containerId, referenceId)
}

// UploadImage mocks base method.
func (m *MockImageService) UploadImage(data []byte) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadImage", data)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadImage indicates an expected call of UploadImage.
func (mr *MockImageServiceMockRecorder) UploadImage(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadImage", reflect.TypeOf((*MockImageService)(nil).UploadImage), data)
}

// WritingTestResultToContainer mocks base method.
func (m *MockImageService) WritingTestResultToContainer(containerId string, test model.Test) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WritingTestResultToContainer", containerId, test)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WritingTestResultToContainer indicates an expected call of WritingTestResultToContainer.
func (mr *MockImageServiceMockRecorder) WritingTestResultToContainer(containerId, test interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WritingTestResultToContainer", reflect.TypeOf((*MockImageService)(nil).WritingTestResultToContainer), containerId, test)
}
